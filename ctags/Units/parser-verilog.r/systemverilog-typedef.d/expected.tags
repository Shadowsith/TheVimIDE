A	input.sv	/^    A = 2'b00,$/;"	c	typedef:type_enum_bit_bus_defined_values
B	input.sv	/^    B = 2'b01,$/;"	c	typedef:type_enum_bit_bus_defined_values
C	input.sv	/^    C = 2'b10,$/;"	c	typedef:type_enum_bit_bus_defined_values
D	input.sv	/^    D = {1'b1, 1'b1}$/;"	c	typedef:type_enum_bit_bus_defined_values
W	input.sv	/^typedef enum bit       {W, X}    type_enum_bit;$/;"	c	typedef:type_enum_bit
X	input.sv	/^typedef enum bit       {W, X}    type_enum_bit;$/;"	c	typedef:type_enum_bit
Y	input.sv	/^typedef enum bit [1:0] {Y, Z}    type_enum_bit2;$/;"	c	typedef:type_enum_bit2
Z	input.sv	/^typedef enum bit [1:0] {Y, Z}    type_enum_bit2;$/;"	c	typedef:type_enum_bit2
cond0	input.sv	/^    cond0 = 0, cond1 = 1, cond2 = 2$/;"	c	typedef:type_int_unsigned
cond1	input.sv	/^    cond0 = 0, cond1 = 1, cond2 = 2$/;"	c	typedef:type_int_unsigned
cond2	input.sv	/^    cond0 = 0, cond1 = 1, cond2 = 2$/;"	c	typedef:type_int_unsigned
fwd_type	input.sv	/^typedef                   fwd_type;$/;"	Q
fwd_type_class	input.sv	/^typedef class             fwd_type_class;$/;"	Q
fwd_type_enum	input.sv	/^typedef enum              fwd_type_enum;$/;"	Q
fwd_type_interface_class	input.sv	/^typedef interface class   fwd_type_interface_class;$/;"	Q
fwd_type_struct	input.sv	/^typedef struct            fwd_type_struct;$/;"	Q
fwd_type_union	input.sv	/^typedef union             fwd_type_union;$/;"	Q
no	input.sv	/^typedef enum           {no, yes} type_enum;$/;"	c	typedef:type_enum
type_bit	input.sv	/^typedef      bit                 type_bit;$/;"	T
type_bit_bus	input.sv	/^typedef      bit [1:0]           type_bit_bus;$/;"	T
type_bit_bus_array	input.sv	/^typedef      bit [1:0]           type_bit_bus_array [2:0];$/;"	T
type_class	input.sv	/^typedef classname#(paramvalue) type_class;$/;"	T
type_enum	input.sv	/^typedef enum           {no, yes} type_enum;$/;"	T
type_enum.no	input.sv	/^typedef enum           {no, yes} type_enum;$/;"	c	typedef:type_enum
type_enum.yes	input.sv	/^typedef enum           {no, yes} type_enum;$/;"	c	typedef:type_enum
type_enum_bit	input.sv	/^typedef enum bit       {W, X}    type_enum_bit;$/;"	T
type_enum_bit.W	input.sv	/^typedef enum bit       {W, X}    type_enum_bit;$/;"	c	typedef:type_enum_bit
type_enum_bit.X	input.sv	/^typedef enum bit       {W, X}    type_enum_bit;$/;"	c	typedef:type_enum_bit
type_enum_bit2	input.sv	/^typedef enum bit [1:0] {Y, Z}    type_enum_bit2;$/;"	T
type_enum_bit2.Y	input.sv	/^typedef enum bit [1:0] {Y, Z}    type_enum_bit2;$/;"	c	typedef:type_enum_bit2
type_enum_bit2.Z	input.sv	/^typedef enum bit [1:0] {Y, Z}    type_enum_bit2;$/;"	c	typedef:type_enum_bit2
type_enum_bit_bus_defined_values	input.sv	/^} type_enum_bit_bus_defined_values;$/;"	T
type_enum_bit_bus_defined_values.A	input.sv	/^    A = 2'b00,$/;"	c	typedef:type_enum_bit_bus_defined_values
type_enum_bit_bus_defined_values.B	input.sv	/^    B = 2'b01,$/;"	c	typedef:type_enum_bit_bus_defined_values
type_enum_bit_bus_defined_values.C	input.sv	/^    C = 2'b10,$/;"	c	typedef:type_enum_bit_bus_defined_values
type_enum_bit_bus_defined_values.D	input.sv	/^    D = {1'b1, 1'b1}$/;"	c	typedef:type_enum_bit_bus_defined_values
type_int_unsigned	input.sv	/^    } type_int_unsigned;$/;"	T
type_int_unsigned.cond0	input.sv	/^    cond0 = 0, cond1 = 1, cond2 = 2$/;"	c	typedef:type_int_unsigned
type_int_unsigned.cond1	input.sv	/^    cond0 = 0, cond1 = 1, cond2 = 2$/;"	c	typedef:type_int_unsigned
type_int_unsigned.cond2	input.sv	/^    cond0 = 0, cond1 = 1, cond2 = 2$/;"	c	typedef:type_int_unsigned
type_struct	input.sv	/^  } type_struct;$/;"	T
type_struct_union	input.sv	/^  } type_struct_union;$/;"	T
type_union	input.sv	/^  } type_union;$/;"	T
type_union_packed	input.sv	/^  } type_union_packed;$/;"	T
type_union_tagged	input.sv	/^  } type_union_tagged;$/;"	T
yes	input.sv	/^typedef enum           {no, yes} type_enum;$/;"	c	typedef:type_enum
