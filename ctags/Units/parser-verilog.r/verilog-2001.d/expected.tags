DEFINE	input.v	/^`define DEFINE$/;"	c
DEF_VALUE	input.v	/^`define DEF_VALUE   1'd100$/;"	c
DEF_WITH_EQ	input.v	/^`define DEF_WITH_EQ = 1'd100$/;"	c
LOCALPARAM	input.v	/^localparam LOCALPARAM = 2**2;$/;"	c	module:mod
PARAM1	input.v	/^    parameter PARAM1 = 10,$/;"	c	module:mod
PARAM2	input.v	/^    parameter PARAM2 = 2.0$/;"	c	module:mod
STATE1	input.v	/^localparam STATE1 = 4'h0,$/;"	c	module:mod
STATE2	input.v	/^           STATE2 = 4'h1,$/;"	c	module:mod
STATE3	input.v	/^           STATE3 = 4'h2,$/;"	c	module:mod
STATE4	input.v	/^           STATE4 = 4'h5    ,$/;"	c	module:mod
STATE5	input.v	/^           STATE5 = 4'h6    ,$/;"	c	module:mod
STATE6	input.v	/^           STATE6 = 4'h7    ,$/;"	c	module:mod
STATE7	input.v	/^           STATE7 = 4'h8;$/;"	c	module:mod
a	input.v	/^    input wire a,$/;"	p	module:mod
add	input.v	/^task add ($/;"	t	module:mod
b	input.v	/^    b,c,$/;"	p	module:mod
c	input.v	/^    b,c,$/;"	p	module:mod
d	input.v	/^    d ,$/;"	p	module:mod
e	input.v	/^    output wire e ,$/;"	p	module:mod
f	input.v	/^    output reg f,$/;"	p	module:mod
func_with_range	input.v	/^function [1:0] func_with_range (k, l);$/;"	f	module:mod
g	input.v	/^    inout wire g$/;"	p	module:mod
k	input.v	/^function [1:0] func_with_range (k, l);$/;"	p	function:mod.func_with_range
k	input.v	/^real k;$/;"	r	module:mod
l	input.v	/^function [1:0] func_with_range (k, l);$/;"	p	function:mod.func_with_range
l	input.v	/^integer l;$/;"	r	module:mod
mod	input.v	/^module mod#($/;"	m
mod.LOCALPARAM	input.v	/^localparam LOCALPARAM = 2**2;$/;"	c	module:mod
mod.PARAM1	input.v	/^    parameter PARAM1 = 10,$/;"	c	module:mod
mod.PARAM2	input.v	/^    parameter PARAM2 = 2.0$/;"	c	module:mod
mod.STATE1	input.v	/^localparam STATE1 = 4'h0,$/;"	c	module:mod
mod.STATE2	input.v	/^           STATE2 = 4'h1,$/;"	c	module:mod
mod.STATE3	input.v	/^           STATE3 = 4'h2,$/;"	c	module:mod
mod.STATE4	input.v	/^           STATE4 = 4'h5    ,$/;"	c	module:mod
mod.STATE5	input.v	/^           STATE5 = 4'h6    ,$/;"	c	module:mod
mod.STATE6	input.v	/^           STATE6 = 4'h7    ,$/;"	c	module:mod
mod.STATE7	input.v	/^           STATE7 = 4'h8;$/;"	c	module:mod
mod.a	input.v	/^    input wire a,$/;"	p	module:mod
mod.add	input.v	/^task add ($/;"	t	module:mod
mod.add.x	input.v	/^    input x, y,$/;"	p	task:mod.add
mod.add.y	input.v	/^    input x, y,$/;"	p	task:mod.add
mod.add.z	input.v	/^    output z$/;"	p	task:mod.add
mod.b	input.v	/^    b,c,$/;"	p	module:mod
mod.c	input.v	/^    b,c,$/;"	p	module:mod
mod.d	input.v	/^    d ,$/;"	p	module:mod
mod.e	input.v	/^    output wire e ,$/;"	p	module:mod
mod.f	input.v	/^    output reg f,$/;"	p	module:mod
mod.func_with_range	input.v	/^function [1:0] func_with_range (k, l);$/;"	f	module:mod
mod.func_with_range.k	input.v	/^function [1:0] func_with_range (k, l);$/;"	p	function:mod.func_with_range
mod.func_with_range.l	input.v	/^function [1:0] func_with_range (k, l);$/;"	p	function:mod.func_with_range
mod.g	input.v	/^    inout wire g$/;"	p	module:mod
mod.k	input.v	/^real k;$/;"	r	module:mod
mod.l	input.v	/^integer l;$/;"	r	module:mod
mod.mult	input.v	/^function integer mult ($/;"	f	module:mod
mod.mult.x	input.v	/^    input x,$/;"	p	function:mod.mult
mod.mult.y	input.v	/^    input y);$/;"	p	function:mod.mult
mod.scounter	input.v	/^reg signed [3:0] scounter;$/;"	r	module:mod
mult	input.v	/^function integer mult ($/;"	f	module:mod
scounter	input.v	/^reg signed [3:0] scounter;$/;"	r	module:mod
x	input.v	/^    input x, y,$/;"	p	task:mod.add
x	input.v	/^    input x,$/;"	p	function:mod.mult
y	input.v	/^    input x, y,$/;"	p	task:mod.add
y	input.v	/^    input y);$/;"	p	function:mod.mult
z	input.v	/^    output z$/;"	p	task:mod.add
