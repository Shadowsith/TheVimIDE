set nocompatible
if has('win32')
  let &rtp = '~/vimfiles/bundle/vimtex,' . &rtp
  let &rtp .= ',~/vimfiles/bundle/vimtex/after'
else
  let &rtp = '~/.vim/bundle/vimtex,' . &rtp
  let &rtp .= ',~/.vim/bundle/vimtex/after'
endif
filetype plugin indent on
syntax enable

nnoremap q :qall<cr>

let s:file = expand('<sfile>')
execute 'nnoremap <silent> <space>r :source' s:file "\<cr>"

let g:tex_flavor = 'latex'
let g:vimtex_view_automatic = 0
let g:vimtex_echo_ignore_wait = 1
let g:vimtex_echo_ignore_status = 1

if has('nvim')
  let g:vimtex_compiler_progname = 'nvr'
endif

if has('win32')
  let g:vimtex_view_general_viewer = 'SumatraPDF'
  let g:vimtex_view_general_options =
        \ '-reuse-instance -forward-search @line @pdf @tex'
  let g:vimtex_view_general_options_latexmk = '-reuse-instance'
endif

let s:suite = [
      \ { 'method' : 'latexmk',
      \   'opts' : { 
      \     'backend' : 'process',
      \     'build_dir' : 'out',
      \   }},
      \ { 'method' : 'latexmk',
      \   'opts' : { 
      \     'callback' : 0,
      \   }},
      \ { 'method' : 'latexmk',
      \   'opts' : { 
      \     'background' : 0,
      \     'callback' : 0,
      \   }},
      \ { 'method' : 'latexmk',
      \   'opts' : { 
      \     'continuous' : 0,
      \     'callback' : 0,
      \   }},
      \ { 'method' : 'latexmk',
      \   'opts' : { 
      \     'background' : 0,
      \     'continuous' : 0,
      \   }},
      \ { 'method' : 'latexrun',
      \   'opts' : { 
      \     'backend' : 'process',
      \     'build_dir' : 'out',
      \   }},
      \ { 'method' : 'latexrun',
      \   'opts' : { 
      \     'background' : 0,
      \   }},
      \]

function! RunCompileTestSuite()
  silent edit minimal.tex
  filetype detect

  for l:config in s:suite
    let g:vimtex_compiler_method = l:config.method
    let g:vimtex_compiler_{l:config.method} = l:config.opts
    VimtexReload

    echom 'Method:' l:config.method
    echom 'Config:'
    for [l:key, l:val] in items(l:config.opts)
      echom '  ' . l:key . ':' l:val
    endfor
    echo ''

    " Check if the compiler was loaded
    if !has_key(b:vimtex, 'compiler')
      echoerr "Compiler failed to load!\n"
      break
    endif

    silent! VimtexCompile
    sleep 1

    " Check if continuous mode is active
    if get(b:vimtex.compiler, 'continuous')
      let l:pid = b:vimtex.compiler.get_pid()
      echom 'PID:' l:pid
      if !l:pid
        echoerr "VimtexCompile failed!\n"
        break
      endif
    endif
    call vimtex#compiler#stop()
    sleep 200m

    " Check that the PDF has been built
    let l:out = b:vimtex.out()
    echom 'PDF:' l:out
    if empty(l:out)
      echoerr "VimtexCompile failed!\n"
      break
    endif
    echo ""

    silent! VimtexClean!
    sleep 200m
    if !empty(b:vimtex.out()) || !empty(b:vimtex.aux())
      echoerr "VimtexClean failed!\n"
      break
    endif
    if !empty(get(l:config.opts, 'build_dir', ''))
      call delete(l:config.opts.build_dir, 'rf')
    endif

    echo "\r"
  endfor

  if has('nvim') | quit | endif
endfunction

call RunCompileTestSuite()
