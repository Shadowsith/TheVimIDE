Main	input.elm	/^port module Main exposing (..)$/;"	m	roles:def
List	input.elm	/^import List$/;"	m	roles:imported
Maybe	input.elm	/^import Maybe exposing (withDefault)$/;"	m	roles:imported
Je	input.elm	/^import Json.Encode as Je$/;"	n	roles:def
Thing	input.elm	/^type Thing$/;"	t	roles:def
One	input.elm	/^    = One$/;"	c	type:Thing	roles:def
Two Int	input.elm	/^    | Two Int$/;"	c	type:Thing	roles:def
Param a	input.elm	/^type Param a$/;"	t	roles:def
Cons a	input.elm	/^    = Cons a$/;"	c	type:Param a	roles:def
Other a	input.elm	/^    | Other a$/;"	c	type:Param a	roles:def
Num	input.elm	/^type alias Num =$/;"	a	roles:def
outward	input.elm	/^port outward : String -> Cmd a$/;"	p	roles:def
inward	input.elm	/^port inward : (b -> a) -> Sub a$/;"	p	roles:def
foo	input.elm	/^foo a =$/;"	f	roles:def
bar	input.elm	/^bar =$/;"	f	roles:def
bas	input.elm	/^        bas =$/;"	f	function:bar	roles:def
