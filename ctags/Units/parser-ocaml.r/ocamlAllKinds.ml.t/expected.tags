Input	input.ml	/^module ModuleFoo = struct$/;"	module
ModuleFoo	input.ml	/^module ModuleFoo = struct$/;"	module
foobar	input.ml	/^    type foobar =$/;"	type	module:ModuleFoo
ConstructorFoo	input.ml	/^          ConstructorFoo$/;"	Constructor	type:ModuleFoo/foobar
ConstructorBar	input.ml	/^        | ConstructorBar of int * char list$/;"	Constructor	type:ModuleFoo/foobar
foorecord	input.ml	/^type 'a foorecord =$/;"	type
foofield	input.ml	/^    { foofield : 'a;$/;"	RecordField	type:foorecord
barfield	input.ml	/^     barfield : int;$/;"	RecordField	type:foorecord
foobarfield	input.ml	/^     mutable foobarfield : list char -> int -> unit }$/;"	RecordField	type:foorecord
+-	input.ml	/^let (+-) a b =$/;"	function
shall_appear	input.ml	/^let shall_appear () =$/;"	function
foo_function	input.ml	/^let foo_function a b = (a, b)$/;"	function
fooClass	input.ml	/^class  fooClass =$/;"	class
x	input.ml	/^    val x = ()$/;"	val	class:fooClass
fooMethod	input.ml	/^    method fooMethod = x$/;"	method	class:fooClass
ConnectionNotReachable	input.ml	/^exception ConnectionNotReachable$/;"	Exception
