Add	input.cs	/^      public override int Add(object value) $/;"	m	class:MyCollections.ListWithChangedEvent
Changed	input.cs	/^      public event ChangedEventHandler Changed;$/;"	E	class:MyCollections.ListWithChangedEvent
Changed	input.cs	/^      public event EventHandler Changed;$/;"	E	class:MyCollections.ListWithChangedEvent
ChangedEventHandler	input.cs	/^   public delegate void ChangedEventHandler(object sender, EventArgs e);$/;"	m	namespace:MyCollections
Clear	input.cs	/^      public override void Clear() $/;"	m	class:MyCollections.ListWithChangedEvent
Detach	input.cs	/^      public void Detach() $/;"	m	class:TestEvents.EventListener
EventListener	input.cs	/^      public EventListener(ListWithChangedEvent list) $/;"	m	class:TestEvents.EventListener
EventListener	input.cs	/^   class EventListener $/;"	c	namespace:TestEvents
List	input.cs	/^      private ListWithChangedEvent List;$/;"	f	class:TestEvents.EventListener	file:
ListChanged	input.cs	/^      private void ListChanged(object sender, EventArgs e) $/;"	m	class:TestEvents.EventListener	file:
ListWithChangedEvent	input.cs	/^   public class ListWithChangedEvent: ArrayList $/;"	c	namespace:MyCollections
Main	input.cs	/^      public static void Main() $/;"	m	class:TestEvents.Test
MyCollections	input.cs	/^namespace MyCollections $/;"	n
OnChanged	input.cs	/^      protected virtual void OnChanged(EventArgs e) $/;"	m	class:MyCollections.ListWithChangedEvent
Test	input.cs	/^   class Test $/;"	c	namespace:TestEvents
TestEvents	input.cs	/^namespace TestEvents $/;"	n
