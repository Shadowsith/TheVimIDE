AliasInt	input.d	/^alias AliasInt = int;$/;"	a	file:
CT	input.d	/^	class CT(T)$/;"	c	class:Class	file:
Class	input.d	/^class Class : Interface$/;"	c	file:
Enum	input.d	/^enum Enum : int$/;"	g	file:
IT	input.d	/^interface IT(T){}$/;"	i	file:
Interface	input.d	/^interface Interface$/;"	i	file:
ST	input.d	/^struct ST(T){}$/;"	s	file:
Struct	input.d	/^struct Struct$/;"	s	file:
Template	input.d	/^template Template(alias a, T...)$/;"	T	file:
TemplateAlias	input.d	/^	alias TemplateAlias = a!T;$/;"	a	file:
UT	input.d	/^union UT(T){}$/;"	u	file:
Union	input.d	/^	union Union$/;"	u	struct:Struct	file:
_bar	input.d	/^	private AliasInt _bar;$/;"	m	class:Class	file:
bar	input.d	/^	bar,$/;"	e	enum:Enum	file:
bar	input.d	/^	public AliasInt bar()$/;"	f	class:Class
conditional	input.d	/^	T conditional;$/;"	v	file:
foo	input.d	/^	foo,$/;"	e	enum:Enum	file:
globalVar	input.d	/^__gshared int globalVar;$/;"	v
i	input.d	/^int i;$/;"	v
main	input.d	/^void main(string[] args)$/;"	f	file:
member	input.d	/^		T member;$/;"	m	class:Class.CT	file:
modulevar	input.d	/^	int modulevar;$/;"	m	file:
obj	input.d	/^Object obj;$/;"	v
qar	input.d	/^		int qar;$/;"	m	union:Struct.Union	file:
quxx	input.d	/^		bool quxx;$/;"	m	union:Struct.Union	file:
test.simple	input.d	/^module test.simple;$/;"	M
tfun	input.d	/^	auto tfun(T)(T v)$/;"	f	class:Class
this	input.d	/^	public this(AliasInt x)$/;"	f	class:Class
