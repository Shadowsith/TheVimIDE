Custom Installation
===================

These installation instructions are for Unix or Unix-like platforms (or at
least, those platforms which are able to run a Bourne shell script). If you
are attempting to install Exuberant Ctags on some other platform, see the file
INSTALL.oth.

If you are not familiar with using the configure scripts generated by GNU
autoconf, read the "Basic Installation" section below; then return here.
The configure script in this package supports the following custom options:

  --disable-etags               By default, "make install" will install one
                                binary, "ctags", one man page, "ctags.1", and
                                create links to these two files by the names
                                "etags" and "etags.1". If you do not want to
                                install the "etags" links, use this option.

  --disable-extended-format     Ctags now appends "extension flags" to the
                                end of each tag entry in a manner which is
                                backwards with original Vi implementation
                                (they are placed into an EX comment). This
                                can be disabled via use of the ctags --format
                                option. This configure option changes the
                                default behavior of ctags to disable use of
                                these extension flags (i.e. use the original
                                tag file format).

  --disable-external-sort       Use this option to force use of an internal
                                sort algorithm. On UNIX-like systems, ctags
                                uses the sort utility of the operating system
                                by default because it is more memory efficient.

  --enable-custom-config=FILE   Defines a custom option configuration file to
                                establish site-wide defaults. Ctags will read
                                the following files at startup for options:
                                /etc/ctags.conf, /usr/local/etc/ctags.conf,
                                $HOME/.ctags, and .ctags. If you need a
                                different file, set this option to the full
                                path name of the file you want to be read, and
                                it will be read immediately before reading
                                $HOME/.ctags.

  --enable-macro-patterns       By default, line numbers are used in the tag
                                file for #define objects, in order to remain
                                compatible with the original UNIX ctags. This
                                option will make the default use patterns.

  --enable-maintainer-mode      Creates a special GNU-specific version of the
                                makefile which is used to maintain Exuberant
                                Ctags.

  --enable-tmpdir=DIR           When the library function mkstemp() is
                                available, this option allows specifying the
                                default directory to use for temporary files
                                generated by ctags. This default can be
                                changed at run time by setting the environment
                                variable TMPDIR.

If you wish to change the name of the installed files, edit the makefile
produced by the configure script ("Makefile") before performing the "make
install" step. There are two lines at the top of the file where the names of
the installed files may be customized.


Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.

